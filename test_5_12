#define _CRT_SECURE_NO_WARNINGS 1

#include <stdio.h>

//写一个函数 用二分法查找有序数组中的一个数

//              本质上arr是一个指针
//int binary_search(int arr[], int k, int sz)
//{
//	int left = 0;
//	int right = sz - 1;
//
//	while (left <= right)
//	{
//		int mid = (left + right) / 2;//中间元素下标
//		if (arr[mid] < k)
//		{
//			left = mid + 1;
//		}
//		else if (arr[mid] > k)
//		{
//			right = mid - 1;
//		}
//		else
//		{
//			return mid;
//		}
//	}
//	return -1;
//}
//
//int main()
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int k = 7;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	//           传递过去的是数组arr首元素地址
//	int ret = binary_search(arr, k, sz);
//	if (ret == -1)
//	{
//		printf("找不到指定的数字\n");
//	}
//	else
//	{
//		printf("找到了，下标为：%d\n", ret);
//	}
//	return 0;
//}


//写一个函数 每调用一次这个函数 num的值增加1
//void Add(int* num)
//{
//	(*num)++;
//}
//
//int main()
//{
//	int num = 0;
//	Add(&num);
//	printf("%d\n", num);
//	Add(&num);
//	printf("%d\n", num);
//	Add(&num);
//	printf("%d\n", num);
//	Add(&num);
//	printf("%d\n", num);
//	return 0;
//}


//int main()
//{
//	printf("%d", printf("%d", printf("%d", 43)));//4321
//	return 0;
//}

#include "add.h"  //调用自己定义的函数用双引号

int main()
{
	int a = 10;
	int b = 20;
	int sum = Add(a, b); //头文件中函数声明，.c中函数定义
	printf("%d\n", sum);
	return 0;
}


#define _CRT_SECURE_NO_WARNINGS 1

#include <stdio.h>


//史上最简单递归
//int main()
//{
//	printf("hehe\n");
//	main();
//	return 0;
//}


//接受一个整型值（无符号），按照顺序打印它的每一位
//void print(int i)
//{
//	if (i > 9)
//	{
//		print(i / 10);
//	}
//	printf("%d ", i%10);
//}
//
//int main()
//{
//	unsigned int i = 0;
//	scanf("%d", &i);
//	print(i);
//	return 0;
//}


//编写函数不允许创建临时变量，求字符串的长度
#include <string.h>

//int my_strlen(char* arr)
//{
//	int count = 0;
//	while (*arr != '\0')
//	{
//		count++;
//		arr++;
//	}
//	return count;
//}

//递归的方法
int my_strlen(char* arr)
{
	if (*arr != '\0')
	{
		return 1 + my_strlen(arr + 1);
	}
	else
	{
		return 0;
	}
}

int main()
{
	char arr[] = "hello";
	//int len = strlen(arr);//求字符串长度
	//printf("%d\n", len);

	//模拟实现了一个strlen函数
	int len = my_strlen(arr);//arr是数组，数组传参，传过去的不是整个数组，而是第一个数组的地址
	printf("%d\n", len);
	return 0;
}
